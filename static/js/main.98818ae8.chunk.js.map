{"version":3,"sources":["component/Section/Section.module.css","component/Statistics/Statistics.module.css","component/Notification/Notification.module.css","component/FeedbackOptions/FeedbackOptions.module.css","component/Section/Section.jsx","component/Statistics/Statistics.jsx","component/Notification/Notification.jsx","component/FeedbackOptions/FeedbackOptions.jsx","App.js","index.js"],"names":["module","exports","Section","title","children","className","s","tn","Statistics","good","neutral","bad","total","positivePercentage","bbb","Notification","notif","FeedbackOptions","options","onLeaveFeedback","Object","keys","map","key","type","btn","onClick","App","state","handleIncrement","setState","prevState","countTotalFeedback","values","reduce","value","countPositiveFeedbackPercentage","Math","round","this","totalFeedback","message","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oIACAA,EAAOC,QAAU,CAAC,GAAK,sB,gBCAvBD,EAAOC,QAAU,CAAC,IAAM,0B,gBCAxBD,EAAOC,QAAU,CAAC,MAAQ,8B,gBCA1BD,EAAOC,QAAU,CAAC,IAAM,+B,+LCoBTC,MAjBf,YAGI,IAAD,IAFDC,aAEC,MAFO,GAEP,EADDC,EACC,EADDA,SAEA,OACE,qCACE,oBAAIC,UAAWC,IAAEC,GAAjB,SAAsBJ,IACrBC,M,gBC6BQI,EApCI,SAAC,GAMb,IALLC,EAKI,EALJA,KACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,IAGI,IAFJC,aAEI,MAFI,EAEJ,MADJC,0BACI,MADiB,EACjB,EACJ,OACE,gCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,EAAX,OACA,oBAAGP,UAAWC,IAAEQ,IAAhB,+BAEGD,EAFH,Y,gBCLSE,EARM,WACnB,OACE,mBAAGV,UAAWC,IAAEU,MAAhB,gC,iBCwCWC,MAjCf,YAGI,IAFFC,EAEC,EAFDA,QACAC,EACC,EADDA,gBAEA,OACE,8BACGC,OAAOC,KAAKH,GAASI,KAAI,SAAAC,GAAG,OAC3B,wBAEEC,KAAK,SACLnB,UAAWC,IAAEmB,IACbC,QAAS,WACPP,EAAgBI,IALpB,mBAQMA,IAPCA,SCXTI,E,4MACJC,MAAQ,CACNnB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAQPkB,gBAAkB,SAAAL,GAChB,EAAKM,UAAS,SAAAC,GAAS,sBACpBP,EAAOO,EAAUP,GAAQ,O,EAK9BQ,mBAAqB,WAGnB,OADEZ,OAAOa,OAAO,EAAKL,OACEM,QACrB,SAACtB,EAAOuB,GAAR,OAAkBvB,EAAQuB,IAC1B,I,EAIJC,gCACE,WACE,IAAMxB,EACJ,EAAKoB,qBACCvB,EAAS,EAAKmB,MAAdnB,KAMR,OAAOG,EAAQ,EACXyB,KAAKC,MACF7B,EAAOG,EAAS,KAEnB,G,4CAGR,WACE,MACE2B,KAAKX,MADCnB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAEjB6B,EACJD,KAAKP,qBACP,OACE,qCACE,cAAC,EAAD,CAAS7B,MAAM,wBAAf,SACE,cAAC,EAAD,CACEe,QAASqB,KAAKX,MACdT,gBACEoB,KAAKV,oBAKVW,EAAgB,EACf,cAAC,EAAD,CAASrC,MAAM,aAAf,SACE,cAAC,EAAD,CACEM,KAAMA,EACNC,QAASA,EACTC,IAAKA,EAELC,MAAO2B,KAAKP,qBACZnB,mBACE0B,KAAKH,kCACDG,KAAKH,kCACL,MAKV,cAAC,EAAD,CAAcK,QAAQ,6B,GA7EdC,aAmFHf,ICvFfgB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.98818ae8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tn\":\"Section_tn__2IRXh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bbb\":\"Statistics_bbb__ZzsN0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notif\":\"Notification_notif__3WoiA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"FeedbackOptions_btn__23yLQ\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nfunction Section({\n  title = '',\n  children,\n}) {\n  return (\n    <>\n      <h1 className={s.tn}>{title}</h1>\n      {children}\n    </>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Statistics.module.css';\n\nconst Statistics = ({\n  good,\n  neutral,\n  bad,\n  total = 0,\n  positivePercentage = 0,\n}) => {\n  return (\n    <div>\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total} </p>\n      <p className={s.bbb}>\n        Positive feedback:\n        {positivePercentage} %\n      </p>\n    </div>\n  );\n};\n/*const renderStatistics = function (options) {\n  return Object.keys(options).map(key => (\n    <p key={key}>\n      {key}: {options[key]}\n    </p>\n  ));*/\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage:\n    PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import React from 'react';\n//import PropTypes from \"prop-types\";\nimport s from './Notification.module.css';\n\nconst Notification = () => {\n  return (\n    <p className={s.notif}>\n      No feedback given\n    </p>\n  );\n};\n\nexport default Notification;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './FeedbackOptions.module.css';\n\n//\n//{options.map(({ label, color }, index) => (\n//<button\n//key={label}\n//className={this.makeOptionClassName(index)}\n//style={{ backgroundColor: color }}\n//onClick={() => this.setActiveIdx(index)}\n//></button>\n\nfunction FeedbackOptions({\n  options,\n  onLeaveFeedback,\n}) {\n  return (\n    <div>\n      {Object.keys(options).map(key => (\n        <button\n          key={key}\n          type=\"button\"\n          className={s.btn}\n          onClick={() => {\n            onLeaveFeedback(key);\n          }}\n        >\n          {`${key}`}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nFeedbackOptions.propTypes = {\n  /* buttons: PropTypes.shape({\n    good: PropTypes.number.isRequired,\n    neutral: PropTypes.number.isRequired,\n    bad: PropTypes.number.isRequired,\n  }).isRequired,*/\n  options: PropTypes.object.isRequired,\n  onLeaveFeedback:\n    PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","//import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\n\nimport { Component } from 'react';\nimport Section from './component/Section/Section';\nimport Statistics from './component/Statistics/Statistics';\nimport Notification from './component/Notification/Notification';\nimport FeedbackOptions from './component/FeedbackOptions/FeedbackOptions';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  /*handleIncrement = () => {\n    this.setState(prevState => ({\n      value: prevState.value + 1,\n    }));\n  };*/\n  handleIncrement = type => {\n    this.setState(prevState => ({\n      [type]: prevState[type] + 1,\n    }));\n  };\n\n  //Object.values(this.state).reduce((acc, value) =>\n  countTotalFeedback = () => {\n    const feedbacksValues =\n      Object.values(this.state);\n    return feedbacksValues.reduce(\n      (total, value) => total + value,\n      0,\n    );\n  };\n\n  countPositiveFeedbackPercentage =\n    () => {\n      const total =\n        this.countTotalFeedback();\n      const { good } = this.state;\n      /*if (total === 0) {\n          return 0;\n        }\n        return Math.round((good / total) * 100);\n      }*/\n      return total > 0\n        ? Math.round(\n            (good / total) * 100,\n          )\n        : 0;\n    };\n\n  render() {\n    const { good, neutral, bad } =\n      this.state;\n    const totalFeedback =\n      this.countTotalFeedback();\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={this.state}\n            onLeaveFeedback={\n              this.handleIncrement\n            }\n          />\n        </Section>\n\n        {totalFeedback > 0 ? (\n          <Section title=\"Statistics\">\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              //options={this.state}\n              total={this.countTotalFeedback()}\n              positivePercentage={\n                this.countPositiveFeedbackPercentage()\n                  ? this.countPositiveFeedbackPercentage()\n                  : 0\n              }\n            />\n          </Section>\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </>\n    );\n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}